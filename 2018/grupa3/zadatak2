#include <stdio.h>
#include <stdlib.h>

void ucitaj(int n, int m, int mat[][m]) {
 int i, j;
 for (i = 0; i < n; i++)
  for (j = 0; j < m; j++)
   scanf("%d", &mat[i][j]);
}

void ispisi(int n, int m, int mat[][m]) {
 int i, j;
 for (i = 0; i < n; i++, putchar('\n'))
  for (j = 0; j < m; j++)
   printf("%d ", mat[i][j]);
}

int max4(int a, int b, int c, int d) {
 int max = a;

 if (b > max)
  max = b;
 if (c > max)
  max = c;
 if (d > max)
  max = d;

 return max;
}

int max3(int a, int b, int c) {
 int max = a;

 if (b > max)
  max = b;
 if (c > max)
  max = c;

 return max;
}

int menjaj(int n, int mat[][n], int nova[][n]) {
 for (int i = 0; i < n; i++) {
  for (int j = 0; j < n; j++) {
   if (i == 0) {
    if (j == 0) {
     nova[i][j] = max4(mat[i + 1][j + 1], mat[i + 1][j + 2], mat[i + 2][j + 2], mat[i + 2][j + 1]) + mat[i][j];
    } else if (j == n - 1) {
     nova[i][j] = max4(mat[i + 1][j - 2], mat[i + 1][j - 1], mat[i + 2][j - 2], mat[i + 2][j - 1]) + mat[i][j];
    } else
     nova[i][j] = max4(mat[i + 1][j - 1], mat[i + 2][j - 1], mat[i + 1][j + 1], mat[i + 2][j + 2]) + mat[i][j];
   } else if (i == n - 1) {
    if (j == 0) {
     nova[i][j] = max4(mat[i - 2][j + 1], mat[i - 1][j + 1], mat[i - 2][j + 2], mat[i - 1][j + 2]) + mat[i][j];
    } else if (j == n - 1) {
     nova[i][j] = max4(mat[i - 2][j - 2], mat[i - 2][j - 1], mat[i - 1][j - 2], mat[i - 1][j - 1]) + mat[i][j];
    } else {
     nova[i][j] = max4(mat[i - 2][j - 1], mat[i - 1][j - 1], mat[i - 2][j + 1], mat[i - 1][j + 1]) + mat[i][j];
    }
   } else {
    if (j == 0) {
     nova[i][j] = max4(mat[i - 1][j + 1], mat[i - 1][j + 2], mat[i + 1][j + 1], mat[i + 1][j + 2]) + mat[i][j];
    } else if (j == n - 1) {
     nova[i][j] = max4(mat[i - 1][j - 2], mat[i - 1][j - 1], mat[i + 1][j - 2], mat[i + 1][j + 2]) + mat[i][j];
    } else {
     nova[i][j] = max4(mat[i - 1][j - 1], mat[i - 1][j + 1], mat[i + 1][j - 1], mat[i + 1][j + 1]) + mat[i][j];
    }
   }
  }
 }
 return nova[n][n];
}

int main() {
 int n;
 scanf("%d", &n);
 int mat[n][n];
 ucitaj(n, n, mat);
 int matr[n][n];
 menjaj(n, mat, matr);
 ispisi(n, n, matr);

 return 0;
}
