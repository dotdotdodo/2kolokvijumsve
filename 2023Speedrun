Računarski fakultet, Univerzitet Union
22.1.2023

Uvod u programiranje
Drugi kolokvijum – grupa 1

1. (6p) Napisati iterativnu i rekurzivnu funkciju koje rešavaju sledeći izraz za uneto n.
Za n=1 rezultat je 3.
Primeri:


#include <math.h>
#include <stdio.h>

int factorial(int n) {
  if (n == 1)
    return 1;
  else
    return n * factorial(n - 1);
}

double f1(double start_4, double end_2, double count_4, double count_2, int cache, int remember) {

  if (remember % 2 == 0) {
    if (cache == 1) {
      return factorial(end_2) + count_2;
    } else {
      if (cache % 2 == 0) {
        return start_4 + factorial(count_2) / f1(start_4 - 4, end_2, count_4, count_2 + 2, cache - 1, remember);
      }
      if (cache % 2 == 1) {
        return factorial(end_2) + count_4 / f1(start_4, end_2 + 2, count_4 - 4, count_2, cache - 1, remember);
      }
    }
  }
  if (remember % 2 == 1) {
    if (cache == 1) {
      return factorial(end_2) + count_2;
    } else {
      if (cache % 2 == 1) {
        return start_4 + factorial(count_2) / f1(start_4 - 4, end_2, count_4, count_2 + 2, cache - 1, remember);
      }
      if (cache % 2 == 0) {
        return factorial(end_2) + count_4 / f1(start_4, end_2 + 2, count_4 - 4, count_2, cache - 1, remember);
      }
    }
  }
}

double f1_i(int n) {

  double sum = 0;
  if (n % 2 == 0) {
    double LEVO_2 = n;
    double LEVO_Scale = 4;
    double DESNO_4 = 2;
    double DESNO_2 = n - 1;
    double br = DESNO_4 + factorial(LEVO_2);
    printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_Scale, DESNO_4, DESNO_2, br);
    DESNO_4 += 4;
    LEVO_2 -= 2;
    printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_Scale, DESNO_4, DESNO_2, br);
    for (int i = 1; i < n; i++) {
      if (i % 2 == 1) {
        printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_Scale, DESNO_4, DESNO_2, br);
        sum = LEVO_Scale + factorial(DESNO_2) / br;
        br = sum;
        LEVO_Scale += 4;
        DESNO_2 -= 2;
      }
      if (i % 2 == 0) {
        printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_Scale, DESNO_4, DESNO_2, br);
        sum = factorial(LEVO_2) + DESNO_4 / br;
        br = sum;
        LEVO_2 -= 2;
        DESNO_4 += 4;
      }
    }
    return sum;
  }
  if (n % 2 == 1) {
    double LEVO_4 = 2;
    double LEVO_2 = n - 1;
    double DESNO_2 = n;
    double DESNO_4 = 4;
    double br = LEVO_4 + factorial(DESNO_2);
    LEVO_4 += 4;
    DESNO_2 -= 2;
    for (int i = 1; i < n; i++) {
      if (i % 2 == 0) {
        printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_4, DESNO_4, DESNO_2, br);
        sum = LEVO_4 + factorial(DESNO_2) / br;
        br = sum;
        LEVO_4 += 4;
        DESNO_2 -= 2;
      }
      if (i % 2 == 1) {
        printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_4, DESNO_4, DESNO_2, br);
        sum = factorial(LEVO_2) + DESNO_4 / br;
        br = sum;
        LEVO_2 -= 2;
        DESNO_4 += 4;
      }
    }
    return sum;
  }
}

int main() {
  int n;
  scanf("%d", &n);

  printf("%lf\n", f1(n * 2, 2, n * 2 - 2, 1, n, n));
  printf("%lf\n", f1_i(n));

  return 0;
}

(7p) Napisati program koji učitava matricu dimenzija NxN i sortira joj elemente po prstenovima,
u smeru kazaljke na satu od gornjeg levog ugla prstena. Elemente u parnim prstenovima sortirati
u neopadajućem, a elemente u neparnim prstenovima u nerastućem poretku. Prstenovi se broje
od 0 ka unutrašnjosti matrice (polje mat[0][0] pripada prstenu 0). Ispisati ovako sortiranu
matricu.
Primer (n = 5): Ulaz: 4 7 3 1 5 Izlaz: 1 1 1 2 3
2 7 4 6 5 9 9 8 7 3
1 5 3 8 4 8 2 3 6 4
7 2 6 9 8 8 4 5 6 4
3 9 1 8 7 7 7 7 5 5

#include <math.h>
#include <stdio.h>

void spawnMatrix(int n, int mat[n][n]) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      scanf("%d", &mat[i][j]);
    }
  }
}

void printMatrix(int n, int mat[n][n]) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      printf("%2d", mat[i][j]);
    }
    printf("\n");
  }
}
void swap(int *a, int *b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}
/**
5
4 7 3 1 5
2 7 4 6 5
1 5 3 8 4
7 2 6 9 8
3 9 1 8 7
*/

void fixTheMatrix(int n, int mat[n][n]) {
  int chip = 0;
  for (int layer = 0; layer < n / 2; layer++) {

    int first = layer;
    int last = n - 1 - layer;
    if (chip == 0) {
      for (int i = first; i < last; i++) {
        for (int j = first; j < last; j++) {

          for (int k = first; k < last; k++) {
            if (mat[first][k] > mat[first][k + 1]) {
              swap(&mat[first][k], &mat[first][k + 1]);
            }
          }
          for (int k = first; k < last; k++) {
            if (mat[k][last] > mat[k + 1][last]) {
              swap(&mat[k][last], &mat[k + 1][last]);
            }
          }

          for (int k = last; k > first; k--) {
            if (mat[last][k] > mat[last][k - 1]) {
              swap(&mat[last][k], &mat[last][k - 1]);
            }
          }
          for (int k = last; k > first; k--) {
            if (mat[k][first] < mat[k + 1][first]) {
              swap(&mat[k][first], &mat[k + 1][first]);
            }
          }
        }
      }
      chip = 1;
      continue;
    }
    if (chip == 1) {
      for (int i = first; i < last; i++) {
        for (int j = first; j < last; j++) {

          for (int k = first; k < last; k++) {
            if (mat[first][k] < mat[first][k + 1]) {
              swap(&mat[first][k], &mat[first][k + 1]);
            }
          }
          for (int k = first; k < last; k++) {
            if (mat[k][last] < mat[k + 1][last]) {
              swap(&mat[k][last], &mat[k + 1][last]);
            }
          }

          for (int k = last; k > first; k--) {
            if (mat[last][k] < mat[last][k - 1]) {
              swap(&mat[last][k], &mat[last][k - 1]);
            }
          }
          for (int k = last; k > first; k--) {
            if (mat[k][first] > mat[k + 1][first]) {
              swap(&mat[k][first], &mat[k + 1][first]);
            }
          }
        }
      }
    }
  }
}

int main() {
  int n;
  scanf("%d", &n);
  int mat[n][n];
  spawnMatrix(n, mat);
  fixTheMatrix(n, mat);
  printMatrix(n, mat);
}
