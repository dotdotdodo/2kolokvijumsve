Računarski fakultet, Univerzitet Union
22.1.2023

Uvod u programiranje
Drugi kolokvijum – grupa 1

1. (6p) Napisati iterativnu i rekurzivnu funkciju koje rešavaju sledeći izraz za uneto n.
Za n=1 rezultat je 3.
Primeri:


#include <math.h>
#include <stdio.h>

int factorial(int n) {
  if (n == 1)
    return 1;
  else
    return n * factorial(n - 1);
}

double f1(double start_4, double end_2, double count_4, double count_2, int cache, int remember) {

  if (remember % 2 == 0) {
    if (cache == 1) {
      return factorial(end_2) + count_2;
    } else {
      if (cache % 2 == 0) {
        return start_4 + factorial(count_2) / f1(start_4 - 4, end_2, count_4, count_2 + 2, cache - 1, remember);
      }
      if (cache % 2 == 1) {
        return factorial(end_2) + count_4 / f1(start_4, end_2 + 2, count_4 - 4, count_2, cache - 1, remember);
      }
    }
  }
  if (remember % 2 == 1) {
    if (cache == 1) {
      return factorial(end_2) + count_2;
    } else {
      if (cache % 2 == 1) {
        return start_4 + factorial(count_2) / f1(start_4 - 4, end_2, count_4, count_2 + 2, cache - 1, remember);
      }
      if (cache % 2 == 0) {
        return factorial(end_2) + count_4 / f1(start_4, end_2 + 2, count_4 - 4, count_2, cache - 1, remember);
      }
    }
  }
}

double f1_i(int n) {

  double sum = 0;
  if (n % 2 == 0) {
    double LEVO_2 = n;
    double LEVO_Scale = 4;
    double DESNO_4 = 2;
    double DESNO_2 = n - 1;
    double br = DESNO_4 + factorial(LEVO_2);
    printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_Scale, DESNO_4, DESNO_2, br);
    DESNO_4 += 4;
    LEVO_2 -= 2;
    printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_Scale, DESNO_4, DESNO_2, br);
    for (int i = 1; i < n; i++) {
      if (i % 2 == 1) {
        printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_Scale, DESNO_4, DESNO_2, br);
        sum = LEVO_Scale + factorial(DESNO_2) / br;
        br = sum;
        LEVO_Scale += 4;
        DESNO_2 -= 2;
      }
      if (i % 2 == 0) {
        printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_Scale, DESNO_4, DESNO_2, br);
        sum = factorial(LEVO_2) + DESNO_4 / br;
        br = sum;
        LEVO_2 -= 2;
        DESNO_4 += 4;
      }
    }
    return sum;
  }
  if (n % 2 == 1) {
    double LEVO_4 = 2;
    double LEVO_2 = n - 1;
    double DESNO_2 = n;
    double DESNO_4 = 4;
    double br = LEVO_4 + factorial(DESNO_2);
    LEVO_4 += 4;
    DESNO_2 -= 2;
    for (int i = 1; i < n; i++) {
      if (i % 2 == 0) {
        printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_4, DESNO_4, DESNO_2, br);
        sum = LEVO_4 + factorial(DESNO_2) / br;
        br = sum;
        LEVO_4 += 4;
        DESNO_2 -= 2;
      }
      if (i % 2 == 1) {
        printf("L2-%lf LS-%lf D4-%lf D2-%lf BR-%lf\n", LEVO_2, LEVO_4, DESNO_4, DESNO_2, br);
        sum = factorial(LEVO_2) + DESNO_4 / br;
        br = sum;
        LEVO_2 -= 2;
        DESNO_4 += 4;
      }
    }
    return sum;
  }
}

int main() {
  int n;
  scanf("%d", &n);

  printf("%lf\n", f1(n * 2, 2, n * 2 - 2, 1, n, n));
  printf("%lf\n", f1_i(n));

  return 0;
}
