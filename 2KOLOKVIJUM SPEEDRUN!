Računarski fakultet
Univerzitet Union

Uvod u programiranje
drugi kolokvijum - grupa 1
2016G1

1. (6 poena) Napisati dve funkcije koje izračunavaju sledeći koren, jedna iterativno a druga
rekurzivno za dato n. U primeru je n=6;

#include <math.h>
#include <stdio.h>

double f1(double n, int i) {
  if (n == 1)
    return sqrt(((i % 2) + 1) / n);
  else
    return sqrt(((i % 2) + 1) / n + f1(n - 1, i + 1));
}

double f1_i(double n) {
  double result = 0;
  int br = 1;
  double i;
  for (i = 1; i <= n; i++) {
    result = sqrt(((br % 2 + 1) / i) + result);
    printf("%d %lf %lf\n", br % 2 + 1, (br % 2 + 1) / i, result);
    br++;
  }
  return result;
}

int main() {
  int n;
  scanf("%d", &n);
  printf("%lf\n", f1(n, n));
  printf("%lf\n", f1_i(n));
  return 0;
}
--------------------------------------------------------------------------------------------------------------------
2. (7 poena). Napisati funkciju koja za uneti broj n pravi matricu kao u primeru za n=45371. Prva
vrsta matrice su cifre broja, svaka sledeća donja vrsta umanjuje broj iz gornje vrste naizmenično za 1
i 2. Prilikom oduzimanja kada se dođe do 0, kreće se opet od 9. Implementirati odgovarajuće ispise
matrice radi testiranja.
4 5 3 7 1
3 4 2 6 0
1 2 0 4 8
0 1 9 3 7
8 9 7 1 6

#include <math.h>
#include <stdio.h>

/**
45371
*/

int numTobr(int n) {
  int count = 0;
  while (n) {
    count++;
    n /= 10;
  }
  return count;
}

void printMatrix(int m, int mat[m][m]) {
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < m; j++) {
      printf("%2d", mat[i][j]);
    }
    printf("\n");
  }
}
void generateMatrix(int m, int mat[m][m]) {
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < m; j++) {
      mat[i][j] = 0;
    }
  }
}

int main() {
  int n;
  scanf("%d", &n);
  int m = numTobr(n);
  int i = 0;
  int mat[m][m];
  generateMatrix(m, mat);

  for (int j = m - 1; j >= 0; j--) {
    mat[i][j] = n % 10;
    n /= 10;
  }

  for (i = 1; i < m; i++) {
    for (int j = 0; j < m; j++) {
      if (i % 2 == 1) {
        mat[i][j] = mat[i - 1][j] - 1;
        if (mat[i - 1][j] - 1 < 0) {
          mat[i][j] = 9;
        }
      }
      if (i % 2 == 0) {
        mat[i][j] = mat[i - 1][j] - 2;
        if (mat[i - 1][j] - 2 < 0) {
          if (mat[i - 1][j] - 2 == -1)
            mat[i][j] = 9;
          if (mat[i - 1][j] - 2 == -2)
            mat[i][j] = 8;
        }
      }
    }
  }

  printMatrix(m, mat);
  return 0;
}
---------------------------------------------------------------------------
3. (7 poena). Napisati program koji menja unetu rečenicu koja se čuva kao string tako što izbacuje
sve reči koje počinju i završavaju se malim slovom. Pretpostavlja se da se unose samo slova i znak
razmaka (space).
Primer: Recenice se Ne pisu ovakO
Rezultat: Recenice Ne ovakO

#include <stdio.h>
#include <string.h>

#define size 100

/**
Recenice se Ne pisu ovakO
Recenice Ne ovakO
*/

int checker(char *str, int start, int end) {
  if (str[start] >= 'a' && str[start] <= 'z' && str[end] >= 'a' &&
      str[end] <= 'z')
    return 0;
  else
    return 1;
}

int main() {
  char str[size] = "";
  fgets(str, size, stdin);
  str[strlen(str) - 1] = ' ';
  int start = 0;
  int end;
  int k = 0;
  for (int i = 0; i < strlen(str); i++) {
    if (str[i] == ' ') {
      end = i - 1;
      if (checker(str, start, end)) {
        for (int i = start; i <= end; i++) {
          str[k++] = str[i];
        }
        str[k++] = ' ';
      }
      start = i + 1;
    }
  }
  str[k] = '\0';
  puts(str);
}
-------------------------------------------------------------------------------------------------------------------!!
Računarski fakultet
Univerzitet Union

Uvod u programiranje
drugi kolokvijum - grupa 2

1. (6 poena) Napisati dve funkcije koje izračunavaju slededi razlomak jedna iterativno, a druga
rekurzivno za dato n. U primeru je n=6;

#include <math.h>
#include <stdio.h>

double f1(double n, int i) {
  if (n == 1) {
    return n;
  } else
    return n + sqrt(i % 2 + 1) / f1(n - 1, i + 1);
}

double f1_i(double n) {
  double result = 0;
  double num = 1;
  double i = 2;
  int count = 0;
  for (i = 2; i <= n; i++) {
    result = i + sqrt(count % 2 + 1) / num;
    count += 1;
    num = result;
  }
  return result;
}

int main() {
  int n;
  scanf("%d", &n);
  printf("%lf\n", f1(n, n));
  printf("%lf\n", f1_i(n));
  return 0;
}
-------------------------------------------------------------------------------------------------------------------
2. (7 poena). Napisati funkciju koja za uneti broj n pravi matricu kao u primeru za n=45371.
Poslednja vrsta su cifre broja, a svaka slededa gornja vrsta uvedava broj naizmenično za 2 i 1.
Prilikom sabiranja kada se dođe do 9, krede se opet od 0. Implementirati odgovarajude ispise matrice
radi testiranja.
0 1 9 3 7
9 0 8 2 6
7 8 6 0 4
6 7 5 9 3
4 5 3 7 1

#include <math.h>
#include <stdio.h>

/**
45371
*/

int numTobr(int n) {
  int count = 0;
  while (n) {
    count++;
    n /= 10;
  }
  return count;
}

void printMatrix(int m, int mat[m][m]) {
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < m; j++) {
      printf("%2d", mat[i][j] % 10);
    }
    printf("\n");
  }
}

int main() {
  int n;
  scanf("%d", &n);
  int m = numTobr(n);
  int i = m - 1;
  int mat[m][m];

  for (int j = m - 1; j >= 0; j--) {
    mat[i][j] = n % 10;
    n /= 10;
  }

  for (int i = m - 2; i >= 0; i--) {
    for (int j = 0; j < m; j++) {
      if (i % 2 == 1) {
        mat[i][j] = mat[i + 1][j] + 2;
      }
      if (i % 2 == 0) {
        mat[i][j] = mat[i + 1][j] + 1;
      }
    }
  }
  printMatrix(m, mat);
  return 0;
}
-----------------------------------------------------------------------------------------------------------------------------
3. (7 poena) Napisati program koji menja unetu rečenice koja se čuva kao string tako što izbacuje sve
reči koje imaju manje od n karaktera, broj n unosi korisnik. Pretpostavlja se da se unose samo slova i
znak razmaka (space). Primer za n=5.
Primer: Recenica koja ima nekoliko reci
Rezultat: Recenica nekoliko

#include <stdio.h>
#include <string.h>

/**
Primer: Recenica koja ima nekoliko reci
Rezultat: Recenica nekoliko

*/

#define size 100

int main() {
  char str[size] = "";
  fgets(str, size, stdin);
  str[strlen(str) - 1] = ' ';
  int n;
  scanf("%d", &n);
  int start = 0;
  int end;
  int k = 0;
  for (int i = 0; i < strlen(str); i++) {
    if (str[i] == ' ') {
      end = i - 1;
      if (end - start > n) {
        for (int i = start; i <= end; i++) {
          str[k++] = str[i];
        }
        str[k++] = ' ';
      }
      start = i + 1;
    }
  }
  str[k] = '\0';
  puts(str);
}
-------------------------------------------------------------------------------------------!!
Računarski fakultet
Univerzitet Union

Uvod u programiranje
drugi kolokvijum - grupa 3

1 (6 poena). Napisati dve funkcije koje izračunavaju sledeći razlomak jedna iterativno, a druga
rekurzivno za dato n. U primeru je n=6.

#include <math.h>
#include <stdio.h>

double f1(double n, double i, int cache) {
  if (n == cache)
    return sqrt(n * i);
  else {
    if (i == 0) {
      i = 3;
    }
    printf("%lf %lf \n", n, i);
    return sqrt(n * i + f1(n + 1, i - 1, cache));
  }
}

double f1_i(double n) {
  double i;
  double counter = 1;
  double sum = 0;
  for (i = n; i > 0; i--) {
    sum = sqrt(counter * i + sum);
    counter += 1;
    if (counter > 3) counter = 1;
  }
  return sum;
}

int main() {
  int n;
  scanf("%d", &n);
  printf("%lf\n", f1(1, n / 2, n));
  printf("%lf\n", f1_i(n));
  return 0;
}
-----------------------------------------------------------------------------------!!!!!!!

2 (7 poena). Napisati funkciju koja od date matrice pravi novu matricu tako što svaki element
matrice zamenjuje minimumom iz kolone i vrste u kojoj se nalazi element. Napraviti testni program
koji učitava matricu od korisnika i ispisuje rezultat. Primer:
2 3 5 7 5     1 2 2 2 2
3 5 9 2 8     1 2 2 2 2
1 8 2 5 6     1 1 1 1 1
7 3 4 5 4     1 3 2 2 3
1 3 9 6 5     1 1 1 1 1

#include <math.h>
#include <stdio.h>

/**
5
2 3 5 7 5
3 5 9 2 8
1 8 2 5 6
7 3 4 5 4
1 3 9 6 5
*/



void minMatrix(int n, int M[50][50], int N[50][50]) {
    int minRow, minCol;

    // Zamena svakog elementa sa minimumom iz njegove vrste i kolone
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            minRow = M[i][0];
            minCol = M[0][j];

            // Pronalaženje minimuma za svaku vrstu i kolonu
            for (int k = 0; k < n; k++) {
                if (M[i][k] < minRow) minRow = M[i][k];
                if (M[k][j] < minCol) minCol = M[k][j];
            }

            if (minRow < minCol) {
                N[i][j] = minRow;
            } else {
                N[i][j] = minCol;
            }
        }
    }
}

int main() {
    int n, M[50][50], N[50][50];
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &M[i][j]);
        }
    }

    minMatrix(n, M, N);

    printf("\n\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", N[i][j]);
        }
        printf("\n");
    }

    return 0;
}
----------------------------------------------------------------------------------
3. (7 poena). Napisati program koji menja uneti string koji sadrži cifre i znak '-', tako što cifre između
znaka - šiftuje za jedno mesto u desno.

Primer: 345-135-3217
Rezultat: 534-513-7321

#include <math.h>
#include <stdio.h>
#include <string.h>
#define size 100
/**
Primer: 345-135-3217
Rezultat: 534-513-7321
*/

int main() {
  char str[size] = "";
  fgets(str, size, stdin);
  str[strlen(str) - 1] = '-';

  int start = 0;
  int end;
  for (int i = 0; i < strlen(str); i++) {
    if (str[i] == '-') {
      end = i - 1;
      char temp = str[end];
      for (int j = end - 1; j >= start; j--) {
        str[j + 1] = str[j];
      }
      str[start] = temp;
      start = i + 1;
    }
  }
  str[strlen(str) - 1] = '\0';
  puts(str);

  return 0;
}
-------------------------------------------------------------------------------------!!
Računarski fakultet
Univerzitet Union

Uvod u programiranje
drugi kolokvijum - grupa 4

1. (6 poena) Napisati dve funkcije koje izračunavaju sledeći razlomak jedna iterativno, a druga
rekurzivno za dato n. U primeru je n=6.

#include <math.h>
#include <stdio.h>

double f1(int n, double i, int cache) {
  if (cache == n) {
    printf("%d %lf %d\n", n, i, cache);
    return n;
  } else {
    if (n % 2 == 1) {
      printf("%d %lf %d\n", n, i, cache);
      return n + i / f1(n + 1, i - 2, cache);
    }
    if (n % 2 == 0) {
      printf("%d %lf %d\n", n, i, cache);
      return n - i / f1(n + 1, i - 2, cache);
    }
  }
}

double f1_i(double n) {
  double srt = n - 2;
  int i;
  double br = n;
  double rez = 0;
  for (i = n - 1; i > 0; i--) {
    if (i % 2 == 1) {
      printf("%d %lf %lf\n", i, srt, br);
      rez = i + srt / br;
      br = rez;
    }
    if (i % 2 == 0) {
      printf("%d %lf %lf\n", i, srt, br);
      rez = i - srt / br;
      br = rez;
    }
    srt += 2;
  }
  return rez;
}

int main() {
  int n;
  scanf("%d", &n);
  printf("%lf\n", f1(1, n * 2, n));
  printf("%lf\n", f1_i(n));
  return 0;
}

----------------------------------------------------------------------------------
2. (7 poena). Napisati funkciju koja od date matrice pravi novu matricu tako što svaki element
matrice zamenjuje zbirom njemu susednih elemenata u vrsti, ako element ima samo jedan susedni
element onda je zbir jednak tom elementu. Napraviti testni program koji učitava matricu od
korisnika i ispisuje učitanu matricu i rezultat. Primer:

2 3 5 2 1 3 7 5 6 2
3 5 1 2 1 5 4 7 2 2
1 2 2 5 3 2 3 7 5 5
7 3 2 5 4 3 9 8 6 5
1 3 3 1 5 3 4 4 8 1

#include <math.h>
#include <stdio.h>

/**
5
2 3 5 2 1
3 5 1 2 1
1 2 2 5 3
7 3 2 5 4
1 3 3 1 5
*/

void printMatrix(int m, int mat[m][m]) {
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < m; j++) {
      printf("%2d", mat[i][j] % 10);
    }
    printf("\n");
  }
}

void generateMatrix(int m, int mat[m][m]) {
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < m; j++) {
      scanf("%d", &mat[i][j]);
    }
  }
}

int main() {
  int n;
  scanf("%d", &n);
  int mat[n][n];
  generateMatrix(n, mat);
  int nova[n][n];

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (j == 0) {
        nova[i][j] = mat[i][j + 1];
      } else if (j == n - 1) {
        nova[i][j] = mat[i][j - 1];
      } else {
        nova[i][j] = mat[i][j + 1] + mat[i][j - 1];
      }
    }
  }
  printMatrix(n, nova);

  return 0;
}
------------------------------------------------------------------------------------

3. (7 poena). Napisati program koji menja uneti stringa koji sadrži cifre i znak '-', tako što cifre
između znaka - šiftuje za jedno mesto u levo.

Primer: 345-1354-321
Rezultat: 453-3541-213

#include <stdio.h>
#include <string.h>
#define size 100
/**
Primer: 345-1354-321
Rezultat: 453-3541-213
*/

int main() {
  char str[size] = "";
  fgets(str, size, stdin);
  str[strlen(str) - 1] = '-';

  int start = 0;
  int end;
  for (int i = 0; i < strlen(str); i++) {
    if (str[i] == '-') {
      end = i - 1;
      char temp = str[start];
      for (int j = start+1; j <= end; j++) {
        str[j - 1] = str[j];
      }
      str[end] = temp;
      start = i + 1;
    }
  }
  str[strlen(str) - 1] = '\0';
  puts(str);

  return 0;
}

---------------------------------
Računarski fakultet
Univerzitet Union

Uvod u programiranje - 2017/2018
drugi kolokvijum - grupa 1

1. (6 poena) Napisati dve funkcije koje izračunavaju slededi koren, jedna iterativno a druga
rekurzivno za dato n. Dati su primeri za n=6 i n=7.


#include <math.h>
#include <stdio.h>

double f1(double start, double end, double n, int cache, int remember) {
  if (remember % 2 == 0) {
    if (n == 2) {
      if (cache % 2 == 1) {
        return sqrt(start / n);
      } else {
        return sqrt(end / n);
      }
    } else {
      if (cache % 2 == 1) {
        printf("start-%lf n-%lf\n", start, n);
        return sqrt(start / n + f1(start + 1, end, n - 2, cache - 1, remember));
      } else {
        printf("end-%lf n-%lf\n", end, n);
        return sqrt(end / n + f1(start, end - 1, n - 2, cache - 1, remember));
      }
    }
  }
  if (remember % 2 == 1) {
    if (n == 2) {
      if (cache % 2 == 0) {
        return sqrt(start / n);
      } else {
        return sqrt(end / n);
      }
    } else {
      if (cache % 2 == 0) {
        printf("start-%lf n-%lf\n", start, n);
        return sqrt(start / n + f1(start + 1, end, n - 2, cache - 1, remember));
      } else {
        printf("end-%lf n-%lf\n", end, n);
        return sqrt(end / n + f1(start, end - 1, n - 2, cache - 1, remember));
      }
    }
  }
}

double f1_i(int n) {
  double sum = 0;
  if (n % 2 == 1) {
    double start = n / 2;
    double end = (n + 2) / 2;
    double dole = 2;
    for (int i = 0; i < n; i++) {
      if (i % 2 == 1) {
        printf("start-%lf dole-%lf\n", start, dole);
        sum = sqrt(start / dole + sum);
        start -= 1;
        dole += 2;
      }
      if (i % 2 == 0) {
        printf("end-%lf dole-%lf\n", end, dole);
        sum = sqrt(end / dole + sum);
        end += 1;
        dole += 2;
      }
    }
  }
  if (n % 2 == 0) {
    double start = n / 2;
    double end = (n + 2) / 2;
    double dole = 2;
    for (int i = 0; i < n; i++) {
      if (i % 2 == 0) {
        printf("start-%lf dole-%lf\n", start, dole);
        sum = sqrt(start / dole + sum);
        start -= 1;
        dole += 2;
      }
      if (i % 2 == 1) {
        printf("end-%lf dole-%lf\n", end, dole);
        sum = sqrt(end / dole + sum);
        end += 1;
        dole += 2;
      }
    }
  }
  return sum;
}

int main() {
  int n;
  scanf("%d", &n);
  printf("%lf\n", f1(1, n, n * 2, n, n));
  printf("%lf\n", f1_i(n));
  return 0;
}
-----------------------------------------------------------------------------------------
2. (7 poena). Napisati funkciju koja za uneti broj n pravi matricu kao u datim primerima. Cifre broja n
se postavljaju na sporednu dijagonalu, a zatim se vrste popunjavaju redom dupliranim brojevima,
kada se dođe do 9, slededi broj je 0. Cifra na sporednoj dijagonali se uvek duplira sa desne strane.
n=45901 n=999 n=90
2 2 3 3 4 8 8 9 8 9
3 4 4 5 5 8 9 9 0 0
8 8 9 9 0 9 9 0
9 0 0 1 1
1 1 2 2 3

#include <math.h>
#include <stdio.h>

void printMatrix(int m, int mat[m][m]) {
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < m; j++) {
      printf("%2d", abs(mat[i][j] % 10));
    }
    printf("\n");
  }
}

void generateMatrix(int m, int mat[m][m]) {
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < m; j++) {
      scanf("%d", &mat[i][j]);
    }
  }
}

int brCifara(int n) {
  int brCifara = 0;
  while (n) {
    brCifara++;
    n /= 10;
  }
  return brCifara;
}

/**
45901
*/

int main() {
  int n;
  scanf("%d", &n);
  int m = brCifara(n);
  int y = 0;
  int mat[m][m];
  for (int i = m - 1; i >= 0; i--) {
    mat[i][y++] = n % 10;
    n /= 10;
  }

  int tag = m - 1;
  int zaMatricu;
  int counter;
  for (int i = 0; i < m; i++) {
    int br = mat[i][tag];
    zaMatricu = br - (tag / 2);
    if (i % 2 == 1) {
      zaMatricu -= 1;
      {
        if (zaMatricu == -1) {
          zaMatricu = 9;
        }
      }
    }
    if (i % 2 == 0) {
      counter = 0;
    } else
      counter = 1;
    for (int j = 0; j < m; j++) {
      if (counter == 2) {
        zaMatricu++;
        counter = 0;
      }
      mat[i][j] = zaMatricu;
      counter++;
    }
    tag--;
  }
  printMatrix(m, mat);
  return 0;
}





